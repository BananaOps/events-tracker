// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/lock/v1alpha1/lock.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LockService_CreateLock_FullMethodName = "/tracker.lock.v1alpha1.LockService/CreateLock"
	LockService_GetLock_FullMethodName    = "/tracker.lock.v1alpha1.LockService/GetLock"
	LockService_UnLock_FullMethodName     = "/tracker.lock.v1alpha1.LockService/UnLock"
	LockService_ListLocks_FullMethodName  = "/tracker.lock.v1alpha1.LockService/ListLocks"
)

// LockServiceClient is the client API for LockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockServiceClient interface {
	CreateLock(ctx context.Context, in *CreateLockRequest, opts ...grpc.CallOption) (*CreateLockResponse, error)
	GetLock(ctx context.Context, in *GetLockRequest, opts ...grpc.CallOption) (*GetLockResponse, error)
	UnLock(ctx context.Context, in *UnLockRequest, opts ...grpc.CallOption) (*UnLockResponse, error)
	ListLocks(ctx context.Context, in *ListLocksRequest, opts ...grpc.CallOption) (*ListLocksResponse, error)
}

type lockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLockServiceClient(cc grpc.ClientConnInterface) LockServiceClient {
	return &lockServiceClient{cc}
}

func (c *lockServiceClient) CreateLock(ctx context.Context, in *CreateLockRequest, opts ...grpc.CallOption) (*CreateLockResponse, error) {
	out := new(CreateLockResponse)
	err := c.cc.Invoke(ctx, LockService_CreateLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) GetLock(ctx context.Context, in *GetLockRequest, opts ...grpc.CallOption) (*GetLockResponse, error) {
	out := new(GetLockResponse)
	err := c.cc.Invoke(ctx, LockService_GetLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) UnLock(ctx context.Context, in *UnLockRequest, opts ...grpc.CallOption) (*UnLockResponse, error) {
	out := new(UnLockResponse)
	err := c.cc.Invoke(ctx, LockService_UnLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) ListLocks(ctx context.Context, in *ListLocksRequest, opts ...grpc.CallOption) (*ListLocksResponse, error) {
	out := new(ListLocksResponse)
	err := c.cc.Invoke(ctx, LockService_ListLocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockServiceServer is the server API for LockService service.
// All implementations must embed UnimplementedLockServiceServer
// for forward compatibility
type LockServiceServer interface {
	CreateLock(context.Context, *CreateLockRequest) (*CreateLockResponse, error)
	GetLock(context.Context, *GetLockRequest) (*GetLockResponse, error)
	UnLock(context.Context, *UnLockRequest) (*UnLockResponse, error)
	ListLocks(context.Context, *ListLocksRequest) (*ListLocksResponse, error)
	mustEmbedUnimplementedLockServiceServer()
}

// UnimplementedLockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLockServiceServer struct {
}

func (UnimplementedLockServiceServer) CreateLock(context.Context, *CreateLockRequest) (*CreateLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLock not implemented")
}
func (UnimplementedLockServiceServer) GetLock(context.Context, *GetLockRequest) (*GetLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLock not implemented")
}
func (UnimplementedLockServiceServer) UnLock(context.Context, *UnLockRequest) (*UnLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLock not implemented")
}
func (UnimplementedLockServiceServer) ListLocks(context.Context, *ListLocksRequest) (*ListLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocks not implemented")
}
func (UnimplementedLockServiceServer) mustEmbedUnimplementedLockServiceServer() {}

// UnsafeLockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockServiceServer will
// result in compilation errors.
type UnsafeLockServiceServer interface {
	mustEmbedUnimplementedLockServiceServer()
}

func RegisterLockServiceServer(s grpc.ServiceRegistrar, srv LockServiceServer) {
	s.RegisterService(&LockService_ServiceDesc, srv)
}

func _LockService_CreateLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).CreateLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_CreateLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).CreateLock(ctx, req.(*CreateLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_GetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).GetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_GetLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).GetLock(ctx, req.(*GetLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_UnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).UnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_UnLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).UnLock(ctx, req.(*UnLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_ListLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).ListLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_ListLocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).ListLocks(ctx, req.(*ListLocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LockService_ServiceDesc is the grpc.ServiceDesc for LockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracker.lock.v1alpha1.LockService",
	HandlerType: (*LockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLock",
			Handler:    _LockService_CreateLock_Handler,
		},
		{
			MethodName: "GetLock",
			Handler:    _LockService_GetLock_Handler,
		},
		{
			MethodName: "UnLock",
			Handler:    _LockService_UnLock_Handler,
		},
		{
			MethodName: "ListLocks",
			Handler:    _LockService_ListLocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lock/v1alpha1/lock.proto",
}
